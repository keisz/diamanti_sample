apiVersion: v1
items:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    name: cluster-NUM-master-claim
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20G
    storageClassName: high
  status:
    phase: Pending
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    name: cluster-NUM-slave-1-claim
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20G
    storageClassName: medium
  status:
    phase: Pending
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    name: cluster-NUM-slave-2-claim
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20G
    storageClassName: medium
  status:
    phase: Pending
- apiVersion: v1
  kind: ReplicationController
  metadata:
    creationTimestamp: null
    labels:
      postgres/name: cluster
      postgres/role: master
    name: pg-cluster-NUM-master
  spec:
    replicas: 1
    selector:
      postgres/name: cluster
      postgres/role: master
    template:
      metadata:
        annotations:
          diamanti.com/endpoint0: '{"network":"blue","perfTier":"high"}'
        creationTimestamp: null
        labels:
          postgres/name: cluster
          postgres/role: master
      spec:
        containers:
        - env:
          - name: PG_MASTER_HOST
            value: pg-cluster-NUM-master
          - name: PG_MASTER_SERVICE_NAME
            value: pg-cluster-NUM-master
          - name: PG_MASTER_PORT
            value: "5432"
          - name: PG_MODE
            value: slave
          - name: PG_MASTER_USER
            value: master
          - name: PG_MASTER_PASSWORD
            value: password
          - name: PG_USER
            value: pgbench
          - name: PG_PASSWORD
            value: password
          - name: PG_DATABASE
            value: pgbench
          - name: PG_ROOT_PASSWORD
            value: password
          - name: PGHOST
            value: /tmp
          image: diamanti/crunchy-pg:latest
          imagePullPolicy: IfNotPresent
          name: master
          ports:
          - containerPort: 5432
            protocol: TCP
          resources:
            limits:
              cpu: "500m"
              memory: 4Gi
            requests:
              cpu: "500m"
              memory: 4Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /pgdata
            name: pgdata
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: cluster-NUM-master-claim
  status:
    replicas: 0
- apiVersion: v1
  kind: ReplicationController
  metadata:
    creationTimestamp: null
    labels:
      postgres/name: cluster
      postgres/role: slave-1
    name: pg-cluster-NUM-slave-1
  spec:
    replicas: 1
    selector:
      postgres/name: cluster
      postgres/role: slave-1
    template:
      metadata:
        annotations:
          diamanti.com/endpoint0: '{"network":"blue","perfTier":"medium"}'
        creationTimestamp: null
        labels:
          postgres/name: cluster
          postgres/role: slave-1
      spec:
        containers:
        - env:
          - name: PG_MASTER_HOST
            value: pg-cluster-NUM-master
          - name: PG_MASTER_SERVICE_NAME
            value: pg-cluster-NUM-master
          - name: PG_MASTER_PORT
            value: "5432"
          - name: PG_MODE
            value: slave
          - name: PG_MASTER_USER
            value: master
          - name: PG_MASTER_PASSWORD
            value: password
          - name: PG_USER
            value: pgbench
          - name: PG_PASSWORD
            value: password
          - name: PG_DATABASE
            value: pgbench
          - name: PG_ROOT_PASSWORD
            value: password
          - name: PGHOST
            value: /tmp
          image: diamanti/crunchy-pg:latest
          imagePullPolicy: IfNotPresent
          name: slave
          ports:
          - containerPort: 5432
            protocol: TCP
          resources:
            limits:
              cpu: "500m"
              memory: 4Gi
            requests:
              cpu: "500m"
              memory: 4Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /pgdata
            name: pgdata
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: cluster-NUM-slave-1-claim
  status:
    replicas: 0
- apiVersion: v1
  kind: ReplicationController
  metadata:
    creationTimestamp: null
    labels:
      postgres/name: cluster
      postgres/role: slave-2
    name: pg-cluster-NUM-slave-2
  spec:
    replicas: 1
    selector:
      postgres/name: cluster
      postgres/role: slave-2
    template:
      metadata:
        annotations:
          diamanti.com/endpoint0: '{"network":"blue","perfTier":"medium"}'
        creationTimestamp: null
        labels:
          postgres/name: cluster
          postgres/role: slave-2
      spec:
        containers:
        - env:
          - name: PG_MASTER_HOST
            value: pg-cluster-NUM-master
          - name: PG_MASTER_SERVICE_NAME
            value: pg-cluster-NUM-master
          - name: PG_MASTER_PORT
            value: "5432"
          - name: PG_MODE
            value: slave
          - name: PG_MASTER_USER
            value: master
          - name: PG_MASTER_PASSWORD
            value: password
          - name: PG_USER
            value: pgbench
          - name: PG_PASSWORD
            value: password
          - name: PG_DATABASE
            value: pgbench
          - name: PG_ROOT_PASSWORD
            value: password
          - name: PGHOST
            value: /tmp
          image: diamanti/crunchy-pg:latest
          imagePullPolicy: IfNotPresent
          name: slave
          ports:
          - containerPort: 5432
            protocol: TCP
          resources:
            limits:
              cpu: "500m"
              memory: 4Gi
            requests:
              cpu: "500m"
              memory: 4Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /pgdata
            name: pgdata
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: cluster-NUM-slave-2-claim
  status:
    replicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: pg-cluster-NUM-master
  spec:
    clusterIP: None
    ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      postgres/name: cluster
      postgres/role: master
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: pg-cluster-NUM-slave-1
  spec:
    clusterIP: None
    ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      postgres/name: cluster
      postgres/role: slave-1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: pg-cluster-NUM-slave-2
  spec:
    clusterIP: None
    ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      postgres/name: cluster
      postgres/role: slave-2
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
kind: List
metadata: {}
