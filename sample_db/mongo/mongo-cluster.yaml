apiVersion: v1
items:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    name: test-mongo-1-claim
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100G
    storageClassName: high
  status:
    phase: Pending
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    name: test-mongo-2-claim
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100G
    storageClassName: high
  status:
    phase: Pending
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    name: test-mongo-3-claim
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100G
    storageClassName: high
  status:
    phase: Pending
- apiVersion: v1
  kind: ReplicationController
  metadata:
    creationTimestamp: null
    labels:
      diamanti.com/app: mongo
      instance: test-mongo-1
    name: test-mongo-1
  spec:
    replicas: 1
    selector:
      diamanti.com/app: mongo
      instance: test-mongo-1
    template:
      metadata:
        annotations:
          diamanti.com/endpoint0: '{"network":"blue","perfTier":"high"}'
        creationTimestamp: null
        labels:
          diamanti.com/app: mongo
          instance: test-mongo-1
      spec:
        containers:
        - args:
          - sleep 10 && mongod --replSet ycsbrs --bind_ip 0.0.0.0 --journal --wiredTigerCacheSizeGB=2
          command:
          - /bin/sh
          - -c
          image: mongo:latest
          imagePullPolicy: IfNotPresent
          name: mongodb
          ports:
          - containerPort: 27017
            name: listner
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data/db
            name: mongo-vol
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: mongo-vol
          persistentVolumeClaim:
            claimName: test-mongo-1-claim
  status:
    replicas: 0
- apiVersion: v1
  kind: ReplicationController
  metadata:
    creationTimestamp: null
    labels:
      diamanti.com/app: mongo
      instance: test-mongo-2
    name: test-mongo-2
  spec:
    replicas: 1
    selector:
      diamanti.com/app: mongo
      instance: test-mongo-2
    template:
      metadata:
        annotations:
          diamanti.com/endpoint0: '{"network":"blue","perfTier":"high"}'
        creationTimestamp: null
        labels:
          diamanti.com/app: mongo
          instance: test-mongo-2
      spec:
        containers:
        - args:
          - sleep 10 && mongod --replSet ycsbrs --bind_ip 0.0.0.0 --journal --wiredTigerCacheSizeGB=2
          command:
          - /bin/sh
          - -c
          image: mongo:latest
          imagePullPolicy: IfNotPresent
          name: mongodb
          ports:
          - containerPort: 27017
            name: listner
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data/db
            name: mongo-vol
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: mongo-vol
          persistentVolumeClaim:
            claimName: test-mongo-2-claim
  status:
    replicas: 0
- apiVersion: v1
  kind: ReplicationController
  metadata:
    creationTimestamp: null
    labels:
      diamanti.com/app: mongo
      instance: test-mongo-3
    name: test-mongo-3
  spec:
    replicas: 1
    selector:
      diamanti.com/app: mongo
      instance: test-mongo-3
    template:
      metadata:
        annotations:
          diamanti.com/endpoint0: '{"network":"blue","perfTier":"high"}'
        creationTimestamp: null
        labels:
          diamanti.com/app: mongo
          instance: test-mongo-3
      spec:
        containers:
        - args:
          - sleep 10 && mongod --replSet ycsbrs --bind_ip 0.0.0.0 --journal --wiredTigerCacheSizeGB=2
          command:
          - /bin/sh
          - -c
          image: mongo:latest
          imagePullPolicy: IfNotPresent
          name: mongodb
          ports:
          - containerPort: 27017
            name: listner
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data/db
            name: mongo-vol
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: mongo-vol
          persistentVolumeClaim:
            claimName: test-mongo-3-claim
  status:
    replicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: test-svc-mongo-1
  spec:
    clusterIP: None
    ports:
    - name: tcp0
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      instance: test-mongo-1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: test-svc-mongo-2
  spec:
    clusterIP: None
    ports:
    - name: tcp0
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      instance: test-mongo-2
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: test-svc-mongo-3
  spec:
    clusterIP: None
    ports:
    - name: tcp0
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      instance: test-mongo-3
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
kind: List
metadata: {}
