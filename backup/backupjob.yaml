apiVersion: batch/v1
kind: Job
metadata:
  name: backupjob
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        diamanti.com/app: backupcontroller      # Append PVC name and namespace to the label if separate controller is run for each PVC
    spec:
      serviceAccountName: backupcontroller-runner
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: diamanti.com/app
                operator: In
                values: ["backupcontroller"]  # Ensures only 1 backcontroller runs in the cluster
            topologyKey: beta.kubernetes.io/os
      containers:
      - args:
        - -virtualIP=x.x.x.x                   # Virtual IP address of the cluster
        - -sourcePVC=test-pvc                  # PVC to take a backup of associated volume
        - -pvcNamespace=default                # Namespace
        - -backupPlugin=tar                    # Backup plugin type
        - -pluginArgs={"server":"x.x.x.x","path":"\/dws_nas_scratch\/backupdir","mountOptions":"nfsvers=3"}   # Backup plugin args
        - -pluginOptions=["-cvp","--selinux","--acls","--xattrs"] # Backup plugin options
        - -compressed=true                     # Flag to enable/disable compression
        - -maxNumSnapshots=5                   # Maximum number of snapshots that can exist for the PVC
        - -numDaysToKeep=5                     # Maximum number of backups that can exist on NFS server
        - -snapshotPromoter=snapshot-promoter  # Storage class for creating volume from a snapshot
        - -activeVolumesOnly=true              # Flag to backup attached volumes only
        - -cpuResource=100m                    # CPU resource for backup agent
        - -memoryResource=100Mi                # Memory resource for backup agent
        - -maxConcurrentJobs=10                # Max concurrent backup agents
        name: backupjob
        image: diamanti/backupcontroller:v2.3.1.0
      restartPolicy: Never
